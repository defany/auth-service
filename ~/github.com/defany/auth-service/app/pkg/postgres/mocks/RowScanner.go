// Code generated by mockery v2.42.0. DO NOT EDIT.

package mockpgx

import (
	pgx "github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"
)

// MockRowScanner is an autogenerated mock type for the RowScanner type
type MockRowScanner struct {
	mock.Mock
}

type MockRowScanner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRowScanner) EXPECT() *MockRowScanner_Expecter {
	return &MockRowScanner_Expecter{mock: &_m.Mock}
}

// ScanRow provides a mock function with given fields: rows
func (_m *MockRowScanner) ScanRow(rows pgx.Rows) error {
	ret := _m.Called(rows)

	if len(ret) == 0 {
		panic("no return value specified for ScanRow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(pgx.Rows) error); ok {
		r0 = rf(rows)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRowScanner_ScanRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanRow'
type MockRowScanner_ScanRow_Call struct {
	*mock.Call
}

// ScanRow is a helper method to define mock.On call
//   - rows pgx.Rows
func (_e *MockRowScanner_Expecter) ScanRow(rows interface{}) *MockRowScanner_ScanRow_Call {
	return &MockRowScanner_ScanRow_Call{Call: _e.mock.On("ScanRow", rows)}
}

func (_c *MockRowScanner_ScanRow_Call) Run(run func(rows pgx.Rows)) *MockRowScanner_ScanRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pgx.Rows))
	})
	return _c
}

func (_c *MockRowScanner_ScanRow_Call) Return(_a0 error) *MockRowScanner_ScanRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRowScanner_ScanRow_Call) RunAndReturn(run func(pgx.Rows) error) *MockRowScanner_ScanRow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRowScanner creates a new instance of MockRowScanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRowScanner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRowScanner {
	mock := &MockRowScanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
