// Code generated by mockery v2.42.0. DO NOT EDIT.

package mockpgx

import (
	context "context"

	pgx "github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"
)

// MockCopyFromTracer is an autogenerated mock type for the CopyFromTracer type
type MockCopyFromTracer struct {
	mock.Mock
}

type MockCopyFromTracer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCopyFromTracer) EXPECT() *MockCopyFromTracer_Expecter {
	return &MockCopyFromTracer_Expecter{mock: &_m.Mock}
}

// TraceCopyFromEnd provides a mock function with given fields: ctx, conn, data
func (_m *MockCopyFromTracer) TraceCopyFromEnd(ctx context.Context, conn *pgx.Conn, data pgx.TraceCopyFromEndData) {
	_m.Called(ctx, conn, data)
}

// MockCopyFromTracer_TraceCopyFromEnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceCopyFromEnd'
type MockCopyFromTracer_TraceCopyFromEnd_Call struct {
	*mock.Call
}

// TraceCopyFromEnd is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TraceCopyFromEndData
func (_e *MockCopyFromTracer_Expecter) TraceCopyFromEnd(ctx interface{}, conn interface{}, data interface{}) *MockCopyFromTracer_TraceCopyFromEnd_Call {
	return &MockCopyFromTracer_TraceCopyFromEnd_Call{Call: _e.mock.On("TraceCopyFromEnd", ctx, conn, data)}
}

func (_c *MockCopyFromTracer_TraceCopyFromEnd_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TraceCopyFromEndData)) *MockCopyFromTracer_TraceCopyFromEnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pgx.Conn), args[2].(pgx.TraceCopyFromEndData))
	})
	return _c
}

func (_c *MockCopyFromTracer_TraceCopyFromEnd_Call) Return() *MockCopyFromTracer_TraceCopyFromEnd_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCopyFromTracer_TraceCopyFromEnd_Call) RunAndReturn(run func(context.Context, *pgx.Conn, pgx.TraceCopyFromEndData)) *MockCopyFromTracer_TraceCopyFromEnd_Call {
	_c.Call.Return(run)
	return _c
}

// TraceCopyFromStart provides a mock function with given fields: ctx, conn, data
func (_m *MockCopyFromTracer) TraceCopyFromStart(ctx context.Context, conn *pgx.Conn, data pgx.TraceCopyFromStartData) context.Context {
	ret := _m.Called(ctx, conn, data)

	if len(ret) == 0 {
		panic("no return value specified for TraceCopyFromStart")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Conn, pgx.TraceCopyFromStartData) context.Context); ok {
		r0 = rf(ctx, conn, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockCopyFromTracer_TraceCopyFromStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceCopyFromStart'
type MockCopyFromTracer_TraceCopyFromStart_Call struct {
	*mock.Call
}

// TraceCopyFromStart is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TraceCopyFromStartData
func (_e *MockCopyFromTracer_Expecter) TraceCopyFromStart(ctx interface{}, conn interface{}, data interface{}) *MockCopyFromTracer_TraceCopyFromStart_Call {
	return &MockCopyFromTracer_TraceCopyFromStart_Call{Call: _e.mock.On("TraceCopyFromStart", ctx, conn, data)}
}

func (_c *MockCopyFromTracer_TraceCopyFromStart_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TraceCopyFromStartData)) *MockCopyFromTracer_TraceCopyFromStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pgx.Conn), args[2].(pgx.TraceCopyFromStartData))
	})
	return _c
}

func (_c *MockCopyFromTracer_TraceCopyFromStart_Call) Return(_a0 context.Context) *MockCopyFromTracer_TraceCopyFromStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCopyFromTracer_TraceCopyFromStart_Call) RunAndReturn(run func(context.Context, *pgx.Conn, pgx.TraceCopyFromStartData) context.Context) *MockCopyFromTracer_TraceCopyFromStart_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCopyFromTracer creates a new instance of MockCopyFromTracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCopyFromTracer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCopyFromTracer {
	mock := &MockCopyFromTracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
