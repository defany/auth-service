// Code generated by mockery v2.42.0. DO NOT EDIT.

package mockpgx

import (
	pgconn "github.com/jackc/pgx/v5/pgconn"
	mock "github.com/stretchr/testify/mock"
)

// MockCollectableRow is an autogenerated mock type for the CollectableRow type
type MockCollectableRow struct {
	mock.Mock
}

type MockCollectableRow_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollectableRow) EXPECT() *MockCollectableRow_Expecter {
	return &MockCollectableRow_Expecter{mock: &_m.Mock}
}

// FieldDescriptions provides a mock function with given fields:
func (_m *MockCollectableRow) FieldDescriptions() []pgconn.FieldDescription {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FieldDescriptions")
	}

	var r0 []pgconn.FieldDescription
	if rf, ok := ret.Get(0).(func() []pgconn.FieldDescription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pgconn.FieldDescription)
		}
	}

	return r0
}

// MockCollectableRow_FieldDescriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FieldDescriptions'
type MockCollectableRow_FieldDescriptions_Call struct {
	*mock.Call
}

// FieldDescriptions is a helper method to define mock.On call
func (_e *MockCollectableRow_Expecter) FieldDescriptions() *MockCollectableRow_FieldDescriptions_Call {
	return &MockCollectableRow_FieldDescriptions_Call{Call: _e.mock.On("FieldDescriptions")}
}

func (_c *MockCollectableRow_FieldDescriptions_Call) Run(run func()) *MockCollectableRow_FieldDescriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollectableRow_FieldDescriptions_Call) Return(_a0 []pgconn.FieldDescription) *MockCollectableRow_FieldDescriptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectableRow_FieldDescriptions_Call) RunAndReturn(run func() []pgconn.FieldDescription) *MockCollectableRow_FieldDescriptions_Call {
	_c.Call.Return(run)
	return _c
}

// RawValues provides a mock function with given fields:
func (_m *MockCollectableRow) RawValues() [][]byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RawValues")
	}

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func() [][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	return r0
}

// MockCollectableRow_RawValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RawValues'
type MockCollectableRow_RawValues_Call struct {
	*mock.Call
}

// RawValues is a helper method to define mock.On call
func (_e *MockCollectableRow_Expecter) RawValues() *MockCollectableRow_RawValues_Call {
	return &MockCollectableRow_RawValues_Call{Call: _e.mock.On("RawValues")}
}

func (_c *MockCollectableRow_RawValues_Call) Run(run func()) *MockCollectableRow_RawValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollectableRow_RawValues_Call) Return(_a0 [][]byte) *MockCollectableRow_RawValues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectableRow_RawValues_Call) RunAndReturn(run func() [][]byte) *MockCollectableRow_RawValues_Call {
	_c.Call.Return(run)
	return _c
}

// Scan provides a mock function with given fields: dest
func (_m *MockCollectableRow) Scan(dest ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dest...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(dest...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCollectableRow_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type MockCollectableRow_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - dest ...interface{}
func (_e *MockCollectableRow_Expecter) Scan(dest ...interface{}) *MockCollectableRow_Scan_Call {
	return &MockCollectableRow_Scan_Call{Call: _e.mock.On("Scan",
		append([]interface{}{}, dest...)...)}
}

func (_c *MockCollectableRow_Scan_Call) Run(run func(dest ...interface{})) *MockCollectableRow_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockCollectableRow_Scan_Call) Return(_a0 error) *MockCollectableRow_Scan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectableRow_Scan_Call) RunAndReturn(run func(...interface{}) error) *MockCollectableRow_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// Values provides a mock function with given fields:
func (_m *MockCollectableRow) Values() ([]interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Values")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollectableRow_Values_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Values'
type MockCollectableRow_Values_Call struct {
	*mock.Call
}

// Values is a helper method to define mock.On call
func (_e *MockCollectableRow_Expecter) Values() *MockCollectableRow_Values_Call {
	return &MockCollectableRow_Values_Call{Call: _e.mock.On("Values")}
}

func (_c *MockCollectableRow_Values_Call) Run(run func()) *MockCollectableRow_Values_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollectableRow_Values_Call) Return(_a0 []interface{}, _a1 error) *MockCollectableRow_Values_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollectableRow_Values_Call) RunAndReturn(run func() ([]interface{}, error)) *MockCollectableRow_Values_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCollectableRow creates a new instance of MockCollectableRow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollectableRow(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollectableRow {
	mock := &MockCollectableRow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
