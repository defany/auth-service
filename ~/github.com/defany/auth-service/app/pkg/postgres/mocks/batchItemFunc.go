// Code generated by mockery v2.42.0. DO NOT EDIT.

package mockpgx

import (
	pgx "github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"
)

// MockbatchItemFunc is an autogenerated mock type for the batchItemFunc type
type MockbatchItemFunc struct {
	mock.Mock
}

type MockbatchItemFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockbatchItemFunc) EXPECT() *MockbatchItemFunc_Expecter {
	return &MockbatchItemFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: br
func (_m *MockbatchItemFunc) Execute(br pgx.BatchResults) error {
	ret := _m.Called(br)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(pgx.BatchResults) error); ok {
		r0 = rf(br)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockbatchItemFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockbatchItemFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - br pgx.BatchResults
func (_e *MockbatchItemFunc_Expecter) Execute(br interface{}) *MockbatchItemFunc_Execute_Call {
	return &MockbatchItemFunc_Execute_Call{Call: _e.mock.On("Execute", br)}
}

func (_c *MockbatchItemFunc_Execute_Call) Run(run func(br pgx.BatchResults)) *MockbatchItemFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pgx.BatchResults))
	})
	return _c
}

func (_c *MockbatchItemFunc_Execute_Call) Return(_a0 error) *MockbatchItemFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockbatchItemFunc_Execute_Call) RunAndReturn(run func(pgx.BatchResults) error) *MockbatchItemFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockbatchItemFunc creates a new instance of MockbatchItemFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockbatchItemFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockbatchItemFunc {
	mock := &MockbatchItemFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
