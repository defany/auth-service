// Code generated by mockery v2.42.0. DO NOT EDIT.

package mockrepository

import (
	context "context"

	model "github.com/defany/auth-service/app/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockLogRepository is an autogenerated mock type for the LogRepository type
type MockLogRepository struct {
	mock.Mock
}

type MockLogRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogRepository) EXPECT() *MockLogRepository_Expecter {
	return &MockLogRepository_Expecter{mock: &_m.Mock}
}

// Log provides a mock function with given fields: ctx, log
func (_m *MockLogRepository) Log(ctx context.Context, log model.Log) error {
	ret := _m.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Log) error); ok {
		r0 = rf(ctx, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogRepository_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type MockLogRepository_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - ctx context.Context
//   - log model.Log
func (_e *MockLogRepository_Expecter) Log(ctx interface{}, log interface{}) *MockLogRepository_Log_Call {
	return &MockLogRepository_Log_Call{Call: _e.mock.On("Log", ctx, log)}
}

func (_c *MockLogRepository_Log_Call) Run(run func(ctx context.Context, log model.Log)) *MockLogRepository_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Log))
	})
	return _c
}

func (_c *MockLogRepository_Log_Call) Return(_a0 error) *MockLogRepository_Log_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogRepository_Log_Call) RunAndReturn(run func(context.Context, model.Log) error) *MockLogRepository_Log_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogRepository creates a new instance of MockLogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogRepository {
	mock := &MockLogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
