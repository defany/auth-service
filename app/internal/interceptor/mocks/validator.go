// Code generated by mockery v2.42.0. DO NOT EDIT.

package mockinterceptor

import mock "github.com/stretchr/testify/mock"

// Mockvalidator is an autogenerated mock type for the validator type
type Mockvalidator struct {
	mock.Mock
}

type Mockvalidator_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockvalidator) EXPECT() *Mockvalidator_Expecter {
	return &Mockvalidator_Expecter{mock: &_m.Mock}
}

// Validate provides a mock function with given fields:
func (_m *Mockvalidator) Validate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockvalidator_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type Mockvalidator_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
func (_e *Mockvalidator_Expecter) Validate() *Mockvalidator_Validate_Call {
	return &Mockvalidator_Validate_Call{Call: _e.mock.On("Validate")}
}

func (_c *Mockvalidator_Validate_Call) Run(run func()) *Mockvalidator_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mockvalidator_Validate_Call) Return(_a0 error) *Mockvalidator_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockvalidator_Validate_Call) RunAndReturn(run func() error) *Mockvalidator_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAll provides a mock function with given fields:
func (_m *Mockvalidator) ValidateAll() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ValidateAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockvalidator_ValidateAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAll'
type Mockvalidator_ValidateAll_Call struct {
	*mock.Call
}

// ValidateAll is a helper method to define mock.On call
func (_e *Mockvalidator_Expecter) ValidateAll() *Mockvalidator_ValidateAll_Call {
	return &Mockvalidator_ValidateAll_Call{Call: _e.mock.On("ValidateAll")}
}

func (_c *Mockvalidator_ValidateAll_Call) Run(run func()) *Mockvalidator_ValidateAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mockvalidator_ValidateAll_Call) Return(_a0 error) *Mockvalidator_ValidateAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockvalidator_ValidateAll_Call) RunAndReturn(run func() error) *Mockvalidator_ValidateAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockvalidator creates a new instance of Mockvalidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockvalidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockvalidator {
	mock := &Mockvalidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
