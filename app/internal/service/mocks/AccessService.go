// Code generated by mockery v2.42.0. DO NOT EDIT.

package mockdefserv

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAccessService is an autogenerated mock type for the AccessService type
type MockAccessService struct {
	mock.Mock
}

type MockAccessService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccessService) EXPECT() *MockAccessService_Expecter {
	return &MockAccessService_Expecter{mock: &_m.Mock}
}

// DoesHaveAccess provides a mock function with given fields: ctx, token, endpoint
func (_m *MockAccessService) DoesHaveAccess(ctx context.Context, token string, endpoint string) error {
	ret := _m.Called(ctx, token, endpoint)

	if len(ret) == 0 {
		panic("no return value specified for DoesHaveAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, endpoint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccessService_DoesHaveAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoesHaveAccess'
type MockAccessService_DoesHaveAccess_Call struct {
	*mock.Call
}

// DoesHaveAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - endpoint string
func (_e *MockAccessService_Expecter) DoesHaveAccess(ctx interface{}, token interface{}, endpoint interface{}) *MockAccessService_DoesHaveAccess_Call {
	return &MockAccessService_DoesHaveAccess_Call{Call: _e.mock.On("DoesHaveAccess", ctx, token, endpoint)}
}

func (_c *MockAccessService_DoesHaveAccess_Call) Run(run func(ctx context.Context, token string, endpoint string)) *MockAccessService_DoesHaveAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAccessService_DoesHaveAccess_Call) Return(_a0 error) *MockAccessService_DoesHaveAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccessService_DoesHaveAccess_Call) RunAndReturn(run func(context.Context, string, string) error) *MockAccessService_DoesHaveAccess_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccessService creates a new instance of MockAccessService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccessService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccessService {
	mock := &MockAccessService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
