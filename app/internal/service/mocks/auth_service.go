// Code generated by mockery v2.42.0. DO NOT EDIT.

package mockdefserv

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/defany/auth-service/app/internal/model"
)

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// AccessToken provides a mock function with given fields: ctx, accessToken
func (_m *MockAuthService) AccessToken(ctx context.Context, accessToken string) (string, error) {
	ret := _m.Called(ctx, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for AccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, accessToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_AccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccessToken'
type MockAuthService_AccessToken_Call struct {
	*mock.Call
}

// AccessToken is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
func (_e *MockAuthService_Expecter) AccessToken(ctx interface{}, accessToken interface{}) *MockAuthService_AccessToken_Call {
	return &MockAuthService_AccessToken_Call{Call: _e.mock.On("AccessToken", ctx, accessToken)}
}

func (_c *MockAuthService_AccessToken_Call) Run(run func(ctx context.Context, accessToken string)) *MockAuthService_AccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_AccessToken_Call) Return(_a0 string, _a1 error) *MockAuthService_AccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_AccessToken_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockAuthService_AccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, input
func (_m *MockAuthService) Login(ctx context.Context, input model.UserLoginInput) (model.UserLoginOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 model.UserLoginOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserLoginInput) (model.UserLoginOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserLoginInput) model.UserLoginOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(model.UserLoginOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserLoginInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - input model.UserLoginInput
func (_e *MockAuthService_Expecter) Login(ctx interface{}, input interface{}) *MockAuthService_Login_Call {
	return &MockAuthService_Login_Call{Call: _e.mock.On("Login", ctx, input)}
}

func (_c *MockAuthService_Login_Call) Run(run func(ctx context.Context, input model.UserLoginInput)) *MockAuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserLoginInput))
	})
	return _c
}

func (_c *MockAuthService_Login_Call) Return(_a0 model.UserLoginOutput, _a1 error) *MockAuthService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_Login_Call) RunAndReturn(run func(context.Context, model.UserLoginInput) (model.UserLoginOutput, error)) *MockAuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *MockAuthService) RefreshToken(ctx context.Context, refreshToken string) (string, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockAuthService_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *MockAuthService_Expecter) RefreshToken(ctx interface{}, refreshToken interface{}) *MockAuthService_RefreshToken_Call {
	return &MockAuthService_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx, refreshToken)}
}

func (_c *MockAuthService_RefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *MockAuthService_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_RefreshToken_Call) Return(_a0 string, _a1 error) *MockAuthService_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_RefreshToken_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockAuthService_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
