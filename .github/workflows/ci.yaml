name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: "defany"
  IMAGE_NAME: "user-service"
  CONTAINER_NAME: "user-service"

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache-dependency-path: go.sum

      - name: Build
        run: go build -o ./bin/ -v ./...

      - name: Test
        run: go test -v ./...

  linter:
    name: lint
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.53

          args: --timeout=30m --config=./.golangci.pipeline.yaml --issues-exit-code=0

  build-push:
    runs-on: ubuntu-latest
    needs: linter

    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          docker buildx create --use
          docker buildx build --no-cache --push --tag $REGISTRY/$IMAGE_NAME:$TAG_NAME .

  deploy:
    runs-on: ubuntu-latest
    needs: build-push

    steps:
      - name: Deploy to server via SSH action
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: IMAGE_NAME, REGISTRY, GITHUB_SHA, CONTAINER_NAME
          script: |
            # Set up variables
            TAG_NAME=$(echo $GITHUB_SHA | head -c7)
            
            # Login into Selectel Registry
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} $REGISTRY
            
            # Stop running container
            docker stop $CONTAINER_NAME
            
            # Remove old container
            docker rm $CONTAINER_NAME
            
            # Run a new container from a new image
            docker run -d -p 50100:50001 --name $CONTAINER_NAME -t $REGISTRY/$IMAGE_NAME:$TAG_NAME